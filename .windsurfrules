# Project: Personal Website â€” Rules & Conventions

## Code Style & Formatting

- Use HTML, CSS, and modular JavaScript as the foundation of the project.
- Prefer small, pure, and reusable functions; avoid long functions or files.
- Use functional and declarative patterns in JavaScript; avoid classes.
- Separate responsibilities: each function, CSS block, or HTML section should have a clear purpose.
- Use CSS variables and Flexbox for responsiveness.
- Maintain consistent indentation (2 spaces for HTML/CSS/JS).
- Use ESLint and Prettier to ensure automatic quality and consistency.

## Modularization & Files

- Avoid long files: split code into smaller, thematic files (e.g., sections/, components/, utils/).
- JavaScript: separate utilities, helpers, and specific logic into dedicated files under utils/ or modules/.
- CSS: modularize styles by section or component, importing them into the main file.
- HTML: use includes or partials (e.g., with Eleventy or another static site generator) for large sections.
- Tests: keep test files short and organized by feature or page.

## Naming Conventions

- Use English, descriptive, kebab-case names for folders.
- Use camelCase for variables and functions in JavaScript.
- Use clear names without unnecessary abbreviations.

## Best Practices

- Favor simple solutions using basic technologies, but allow modern tools (TypeScript, preprocessors, etc.) when they increase clarity, safety, or maintainability.
- Avoid heavy dependencies by default, but do not forbid technologies like Tailwind, React, Vue, Expo, or TypeScript if justified.
- Keep code accessible and semantically correct.
- Implement and maintain light/dark themes via CSS and JS.
- Ensure responsiveness across all devices.
- Use Playwright tests to validate accessibility, responsiveness, and integrity.

## Optimization for Artificial Intelligence

- Smaller and modular files facilitate analysis, refactoring, and automation by AI agents.
- Clear comments and local documentation help AI understand the purpose of each module.
- Avoid complex logic in a single place; break it into distinct functions and files.
- Always update documentation after modularization or refactoring.

## Automation & CI/CD

- Use Husky to run Playwright tests before each commit.
- Automatically deploy via Cloudflare Pages when updating the main branch.
- Keep CI/CD workflows updated in .github/.

## Documentation

- Keep README.md always up to date.
- Document new rules and decisions in this file.
- Update or remove outdated guides that no longer reflect the state of the project.

## Updates

- Always review this file after structural or procedural changes.