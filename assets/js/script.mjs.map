{"version":3,"sources":["../script.ts"],"sourcesContent":["// TypeScript version of script.js (migrated)\n\ninterface ObserverOptions {\n    threshold: number;\n}\n\nfunction setTheme(theme: string): void {\n    document.documentElement.setAttribute('data-theme', theme);\n    localStorage.setItem('theme', theme);\n}\n\nconst themeToggle = document.querySelector<HTMLButtonElement>('.theme-toggle');\nconst prefersDarkScheme = window.matchMedia('(prefers-color-scheme: dark)');\n\nconst savedTheme = localStorage.getItem('theme');\nif (savedTheme) {\n    setTheme(savedTheme);\n} else if (prefersDarkScheme.matches) {\n    setTheme('dark');\n}\n\nif (themeToggle) {\n    themeToggle.addEventListener('click', () => {\n        const currentTheme = document.documentElement.getAttribute('data-theme') || 'light';\n        const newTheme = currentTheme === 'light' ? 'dark' : 'light';\n        setTheme(newTheme);\n    });\n}\n\ndocument.querySelectorAll<HTMLAnchorElement>('a[href^=\"#\"]').forEach(anchor => {\n    anchor.addEventListener('click', function (e: MouseEvent) {\n        e.preventDefault();\n        const href = (this as HTMLAnchorElement).getAttribute('href');\n        if (!href) return;\n        const target = document.querySelector<HTMLElement>(href);\n        if (target) {\n            target.scrollIntoView({ behavior: 'smooth' });\n        }\n    });\n});\n\nconst hamburger = document.querySelector<HTMLButtonElement>('.hamburger');\nconst navLinks = document.querySelector<HTMLElement>('.nav-links');\n\nif (hamburger && navLinks) {\n    hamburger.addEventListener('click', () => {\n        navLinks.style.display = navLinks.style.display === 'flex' ? 'none' : 'flex';\n    });\n}\n\nconst contactForm = document.getElementById('contact-form') as HTMLFormElement | null;\nif (contactForm) {\n    contactForm.addEventListener('submit', (e: Event) => {\n        e.preventDefault();\n        alert('Thank you for your message! I will get back to you soon.');\n        contactForm.reset();\n    });\n}\n\nconst observerOptions: ObserverOptions = {\n    threshold: 0.1\n};\n\nconst observer = new IntersectionObserver((entries: IntersectionObserverEntry[]) => {\n    entries.forEach(entry => {\n        if (entry.isIntersecting) {\n            entry.target.classList.add('animate');\n        }\n    });\n}, observerOptions);\n\ndocument.querySelectorAll<HTMLElement>('.animate-on-scroll').forEach(element => {\n    observer.observe(element);\n});\n"],"mappings":"AAMA,SAASA,EAASC,EAAqB,CACnC,SAAS,gBAAgB,aAAa,aAAcA,CAAK,EACzD,aAAa,QAAQ,QAASA,CAAK,CACvC,CAEA,IAAMC,EAAc,SAAS,cAAiC,eAAe,EACvEC,EAAoB,OAAO,WAAW,8BAA8B,EAEpEC,EAAa,aAAa,QAAQ,OAAO,EAC3CA,EACAJ,EAASI,CAAU,EACZD,EAAkB,SACzBH,EAAS,MAAM,EAGfE,GACAA,EAAY,iBAAiB,QAAS,IAAM,CAExC,IAAMG,GADe,SAAS,gBAAgB,aAAa,YAAY,GAAK,WAC1C,QAAU,OAAS,QACrDL,EAASK,CAAQ,CACrB,CAAC,EAGL,SAAS,iBAAoC,cAAc,EAAE,QAAQC,GAAU,CAC3EA,EAAO,iBAAiB,QAAS,SAAUC,EAAe,CACtDA,EAAE,eAAe,EACjB,IAAMC,EAAQ,KAA2B,aAAa,MAAM,EAC5D,GAAI,CAACA,EAAM,OACX,IAAMC,EAAS,SAAS,cAA2BD,CAAI,EACnDC,GACAA,EAAO,eAAe,CAAE,SAAU,QAAS,CAAC,CAEpD,CAAC,CACL,CAAC,EAED,IAAMC,EAAY,SAAS,cAAiC,YAAY,EAClEC,EAAW,SAAS,cAA2B,YAAY,EAE7DD,GAAaC,GACbD,EAAU,iBAAiB,QAAS,IAAM,CACtCC,EAAS,MAAM,QAAUA,EAAS,MAAM,UAAY,OAAS,OAAS,MAC1E,CAAC,EAGL,IAAMC,EAAc,SAAS,eAAe,cAAc,EACtDA,GACAA,EAAY,iBAAiB,SAAW,GAAa,CACjD,EAAE,eAAe,EACjB,MAAM,0DAA0D,EAChEA,EAAY,MAAM,CACtB,CAAC,EAGL,IAAMC,EAAmC,CACrC,UAAW,EACf,EAEMC,EAAW,IAAI,qBAAsBC,GAAyC,CAChFA,EAAQ,QAAQC,GAAS,CACjBA,EAAM,gBACNA,EAAM,OAAO,UAAU,IAAI,SAAS,CAE5C,CAAC,CACL,EAAGH,CAAe,EAElB,SAAS,iBAA8B,oBAAoB,EAAE,QAAQI,GAAW,CAC5EH,EAAS,QAAQG,CAAO,CAC5B,CAAC","names":["setTheme","theme","themeToggle","prefersDarkScheme","savedTheme","newTheme","anchor","e","href","target","hamburger","navLinks","contactForm","observerOptions","observer","entries","entry","element"]}