name: Lighthouse Audit

on:
  # Executa em pushes para main
  push:
    branches: [main]
  # Executa em PRs para main
  pull_request:
    branches: [main]
  # Permite execu√ß√£o manual
  workflow_dispatch:
  # Executa semanalmente para monitorar performance
  schedule:
    - cron: '0 0 * * 1' # Toda segunda-feira √† meia-noite

jobs:
  lighthouse-audit:
    name: Performance Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v3

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Instalar depend√™ncias
        run: npm ci

      - name: Iniciar servidor
        run: |
          npm install -g serve
          serve -s src -l 5000 --single & # Serve from src directory
          sleep 5

      - name: Executar Lighthouse CI
        id: lighthouse
        uses: treosh/lighthouse-ci-action@v9
        with:
          urls: |
            http://localhost:5000/
          uploadArtifacts: false
          temporaryPublicStorage: true # Required for direct outputs like links and scores

      # Removed the problematic 'Processar resultados do Lighthouse' step

      - name: Gerar coment√°rio com resultados
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Get scores directly from Lighthouse action outputs
            const performance = parseFloat('${{ steps.lighthouse.outputs.scores_performance }}') || 0;
            const accessibility = parseFloat('${{ steps.lighthouse.outputs.scores_accessibility }}') || 0;
            const bestPractices = parseFloat('${{ steps.lighthouse.outputs.scores_best-practices }}') || 0; // Note the key name
            const seo = parseFloat('${{ steps.lighthouse.outputs.scores_seo }}') || 0;

            // Parse the links JSON output to get the report URL
            const linksOutput = `${{ steps.lighthouse.outputs.links }}`;
            let reportUrl = '#';
            try {
              const links = JSON.parse(linksOutput);
              // Use the first URL found in the links JSON as the report URL
              if (links && Object.keys(links).length > 0) {
                reportUrl = links[Object.keys(links)[0]];
              }
            } catch (e) {
              console.error("Error parsing Lighthouse links output:", e);
              console.error("Links output was:", linksOutput);
            }

            // Create table of scores
            let scoreTable = '| M√©trica | Pontua√ß√£o |\n| ------- | -------- |\n';
            scoreTable += `| Performance | ${Math.round(performance * 100)} |\n`;
            scoreTable += `| Acessibilidade | ${Math.round(accessibility * 100)} |\n`;
            scoreTable += `| Melhores Pr√°ticas | ${Math.round(bestPractices * 100)} |\n`;
            scoreTable += `| SEO | ${Math.round(seo * 100)} |\n`;

            // Create comment
            const comment = `## üìà Relat√≥rio Lighthouse

            ${scoreTable}

            ### üîç Detalhes

            - [Relat√≥rio Lighthouse Completo](${reportUrl})
            - _Resultados detalhados tamb√©m est√£o dispon√≠veis nos artefatos da execu√ß√£o._

            `;

            // Postar coment√°rio na PR
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Verificar thresholds de performance
        if: github.event_name == 'push' || github.event_name == 'schedule'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Get scores directly from Lighthouse action outputs
            const performance = parseFloat('${{ steps.lighthouse.outputs.scores_performance }}') || 0;
            const accessibility = parseFloat('${{ steps.lighthouse.outputs.scores_accessibility }}') || 0;
            const bestPractices = parseFloat('${{ steps.lighthouse.outputs.scores_best-practices }}') || 0; // Note the key name
            const seo = parseFloat('${{ steps.lighthouse.outputs.scores_seo }}') || 0;

            // Parse the links JSON output to get the report URL (for the issue body)
            const linksOutput = `${{ steps.lighthouse.outputs.links }}`;
            let reportUrl = '#';
            try {
              const links = JSON.parse(linksOutput);
              if (links && Object.keys(links).length > 0) {
                reportUrl = links[Object.keys(links)[0]];
              }
            } catch (e) {
              console.error("Error parsing Lighthouse links output:", e);
              console.error("Links output was:", linksOutput);
            }

            // Definir thresholds
            const thresholds = {
              performance: 0.85,
              accessibility: 0.9,
              'best-practices': 0.9,
              seo: 0.8
            };

            // Verificar se algum score est√° abaixo do threshold
            let failedMetrics = [];
            if (performance < thresholds.performance) {
              failedMetrics.push(`Performance: ${Math.round(performance * 100)} (threshold: ${Math.round(thresholds.performance * 100)})`);
            }
            if (accessibility < thresholds.accessibility) {
              failedMetrics.push(`Acessibilidade: ${Math.round(accessibility * 100)} (threshold: ${Math.round(thresholds.accessibility * 100)})`);
            }
            if (bestPractices < thresholds['best-practices']) {
              failedMetrics.push(`Melhores Pr√°ticas: ${Math.round(bestPractices * 100)} (threshold: ${Math.round(thresholds['best-practices'] * 100)})`);
            }
            if (seo < thresholds.seo) {
              failedMetrics.push(`SEO: ${Math.round(seo * 100)} (threshold: ${Math.round(thresholds.seo * 100)})`);
            }

            // Criar issue se houver m√©tricas abaixo do threshold
            if (failedMetrics.length > 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'üö® Alerta de Performance: M√©tricas Lighthouse abaixo do threshold',
                body: `## Alerta de Performance\n\n                As seguintes m√©tricas est√£o abaixo dos thresholds definidos:\n\n                ${failedMetrics.map(metric => `- ${metric}`).join('\\n')}\n\n                ### üîç Detalhes\n\n                - [Relat√≥rio Lighthouse Completo](${reportUrl})\n                - _Resultados detalhados tamb√©m est√£o dispon√≠veis nos artefatos da execu√ß√£o._\n\n                Por favor, verifique e corrija os problemas de performance.\n                `,
                labels: ['performance', 'automated', 'bug']
              });
            }
