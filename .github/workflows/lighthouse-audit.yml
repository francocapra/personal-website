name: Lighthouse Audit

on:
  # Executa em pushes para main
  push:
    branches: [ main ]
  # Executa em PRs para main
  pull_request:
    branches: [ main ]
  # Permite execu√ß√£o manual
  workflow_dispatch:
  # Executa semanalmente para monitorar performance
  schedule:
    - cron: '0 0 * * 1' # Toda segunda-feira √† meia-noite

jobs:
  lighthouse-audit:
    name: Performance Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v3
      
      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Instalar depend√™ncias
        run: npm ci
      
      - name: Iniciar servidor
        run: |
          npm install -g serve
          serve -s . -l 5000 --single &
          sleep 5
      
      - name: Executar Lighthouse CI
        id: lighthouse
        uses: treosh/lighthouse-ci-action@v9
        with:
          urls: |
            http://localhost:5000/
          uploadArtifacts: true
          temporaryPublicStorage: true
      
      # Extrair e salvar os resultados do Lighthouse em um formato seguro
      - name: Processar resultados do Lighthouse
        id: process_lighthouse
        run: |
          # Criar um arquivo tempor√°rio com o conte√∫do do manifest
          cat > lighthouse-results.json << 'EOL'
          ${{ steps.lighthouse.outputs.manifest }}
          EOL
          
          # Extrair URLs dos relat√≥rios (se dispon√≠veis)
          if [[ -f lighthouse-results.json && -s lighthouse-results.json ]]; then
            REPORT_URL=$(jq -r '.links[0].url // "#"' lighthouse-results.json 2>/dev/null || echo "#")
            LHR_URL=$(jq -r '.links[0].lhr // "#"' lighthouse-results.json 2>/dev/null || echo "#")
            echo "report_url=$REPORT_URL" >> $GITHUB_OUTPUT
            echo "lhr_url=$LHR_URL" >> $GITHUB_OUTPUT
            
            # Extrair scores
            PERFORMANCE=$(jq -r '.manifest | to_entries[0].value.summary.performance // 0' lighthouse-results.json 2>/dev/null || echo "0")
            ACCESSIBILITY=$(jq -r '.manifest | to_entries[0].value.summary.accessibility // 0' lighthouse-results.json 2>/dev/null || echo "0")
            BEST_PRACTICES=$(jq -r '.manifest | to_entries[0].value.summary.["best-practices"] // 0' lighthouse-results.json 2>/dev/null || echo "0")
            SEO=$(jq -r '.manifest | to_entries[0].value.summary.seo // 0' lighthouse-results.json 2>/dev/null || echo "0")
            
            echo "performance=$PERFORMANCE" >> $GITHUB_OUTPUT
            echo "accessibility=$ACCESSIBILITY" >> $GITHUB_OUTPUT
            echo "best_practices=$BEST_PRACTICES" >> $GITHUB_OUTPUT
            echo "seo=$SEO" >> $GITHUB_OUTPUT
          else
            echo "report_url=#" >> $GITHUB_OUTPUT
            echo "lhr_url=#" >> $GITHUB_OUTPUT
            echo "performance=0" >> $GITHUB_OUTPUT
            echo "accessibility=0" >> $GITHUB_OUTPUT
            echo "best_practices=0" >> $GITHUB_OUTPUT
            echo "seo=0" >> $GITHUB_OUTPUT
          fi
      
      - name: Gerar coment√°rio com resultados
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Usar os outputs do passo de processamento
            const performance = parseFloat('${{ steps.process_lighthouse.outputs.performance }}') || 0;
            const accessibility = parseFloat('${{ steps.process_lighthouse.outputs.accessibility }}') || 0;
            const bestPractices = parseFloat('${{ steps.process_lighthouse.outputs.best_practices }}') || 0;
            const seo = parseFloat('${{ steps.process_lighthouse.outputs.seo }}') || 0;
            
            const reportUrl = '${{ steps.process_lighthouse.outputs.report_url }}';
            const lhrUrl = '${{ steps.process_lighthouse.outputs.lhr_url }}';
            
            // Criar tabela de scores
            let scoreTable = '| M√©trica | Pontua√ß√£o |\n| ------- | -------- |\n';
            scoreTable += `| Performance | ${Math.round(performance * 100)} |\n`;
            scoreTable += `| Acessibilidade | ${Math.round(accessibility * 100)} |\n`;
            scoreTable += `| Melhores Pr√°ticas | ${Math.round(bestPractices * 100)} |\n`;
            scoreTable += `| SEO | ${Math.round(seo * 100)} |\n`;
            
            // Criar coment√°rio
            const comment = `## üìà Relat√≥rio Lighthouse
            
            ${scoreTable}
            
            ### üîç Detalhes
            
            - [Relat√≥rio Completo](${reportUrl})
            - [Visualizar Todas as Execu√ß√µes](${lhrUrl})
            
            `;
            
            // Postar coment√°rio na PR
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
      
      - name: Verificar thresholds de performance
        if: github.event_name == 'push' || github.event_name == 'schedule'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Usar os outputs do passo de processamento
            const performance = parseFloat('${{ steps.process_lighthouse.outputs.performance }}') || 0;
            const accessibility = parseFloat('${{ steps.process_lighthouse.outputs.accessibility }}') || 0;
            const bestPractices = parseFloat('${{ steps.process_lighthouse.outputs.best_practices }}') || 0;
            const seo = parseFloat('${{ steps.process_lighthouse.outputs.seo }}') || 0;
            
            const reportUrl = '${{ steps.process_lighthouse.outputs.report_url }}';
            const lhrUrl = '${{ steps.process_lighthouse.outputs.lhr_url }}';
            
            // Definir thresholds
            const thresholds = {
              performance: 0.85,
              accessibility: 0.9,
              'best-practices': 0.9,
              seo: 0.8
            };
            
            // Verificar se algum score est√° abaixo do threshold
            let failedMetrics = [];
            if (performance < thresholds.performance) {
              failedMetrics.push(`performance: ${Math.round(performance * 100)} (threshold: ${Math.round(thresholds.performance * 100)})`);
            }
            if (accessibility < thresholds.accessibility) {
              failedMetrics.push(`accessibility: ${Math.round(accessibility * 100)} (threshold: ${Math.round(thresholds.accessibility * 100)})`);
            }
            if (bestPractices < thresholds['best-practices']) {
              failedMetrics.push(`best-practices: ${Math.round(bestPractices * 100)} (threshold: ${Math.round(thresholds['best-practices'] * 100)})`);
            }
            if (seo < thresholds.seo) {
              failedMetrics.push(`seo: ${Math.round(seo * 100)} (threshold: ${Math.round(thresholds.seo * 100)})`);
            }
            
            // Criar issue se houver m√©tricas abaixo do threshold
            if (failedMetrics.length > 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'üö® Alerta de Performance: M√©tricas Lighthouse abaixo do threshold',
                body: `## Alerta de Performance
                
                As seguintes m√©tricas est√£o abaixo dos thresholds definidos:
                
                ${failedMetrics.map(metric => `- ${metric}`).join('\n')}
                
                ### üîç Detalhes
                
                - [Relat√≥rio Completo](${reportUrl})
                - [Visualizar Todas as Execu√ß√µes](${lhrUrl})
                
                Por favor, verifique e corrija os problemas de performance.
                `,
                labels: ['performance', 'automated']
              });
            }
